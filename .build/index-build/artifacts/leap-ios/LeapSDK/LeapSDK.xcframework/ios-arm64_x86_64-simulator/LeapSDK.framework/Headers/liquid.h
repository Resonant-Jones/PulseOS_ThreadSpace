/**
 * Liquid is a C library for running LLMs.
 * Copyright (c) 2025 LiquidAI. All rights reserved.
 *
 * This software is closed-source and subject to individual licensing terms.
 * Use without prior written permission is prohibited.
 */

#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>

#ifdef LIQUID_SHARED
#  if defined(_WIN32) && !defined(__MINGW32__)
#    ifdef LIQUID_BUILD
#      define LIQUID_API __declspec(dllexport)
#    else
#      define LIQUID_API __declspec(dllimport)
#    endif
#  else
#    define LIQUID_API __attribute__ ((visibility ("default")))
#  endif
#else
#  define LIQUID_API
#endif


typedef enum liquid_error_t {
  /**
   * Success
   */
  LIQUID_ERROR_T_SUCCESS = 0,
  /**
   * Load error, any resource loading error
   */
  LIQUID_ERROR_T_LOAD_ERROR = 1,
  /**
   * Invalid argument, the argument is invalid
   */
  LIQUID_ERROR_T_INVALID_ARGUMENT = 2,
  /**
   * Invalid buffer size
   */
  LIQUID_ERROR_T_INVALID_BUFFER_SIZE = 3,
  /**
   * Exceed context length, inference engine specific error
   */
  LIQUID_ERROR_T_EXCEED_CONTEXT_LENGTH = 4,
  /**
   * Internal error, unrecoverable error
   */
  LIQUID_ERROR_T_INTERNAL_ERROR = 5,
  /**
   * Not found, the resource is not found
   */
  LIQUID_ERROR_T_NOT_FOUND = 6,
} liquid_error_t;

/**
 * Constraint types for text generation
 */
typedef enum liquid_inference_engine_constraint_type_t {
  LIQUID_INFERENCE_ENGINE_CONSTRAINT_TYPE_T_REGEX = 0,
  LIQUID_INFERENCE_ENGINE_CONSTRAINT_TYPE_T_JSON_SCHEMA = 1,
  LIQUID_INFERENCE_ENGINE_CONSTRAINT_TYPE_T_TWO_STEP_DSL = 2,
} liquid_inference_engine_constraint_type_t;

typedef enum liquid_log_level_t {
  /**
   * Debug and above is enabled
   */
  LIQUID_LOG_LEVEL_T_DEBUG = 0,
  /**
   * Info and above is enabled
   */
  LIQUID_LOG_LEVEL_T_INFO = 1,
  /**
   * Warn and above is enabled
   */
  LIQUID_LOG_LEVEL_T_WARN = 2,
  /**
   * Error and above is enabled
   */
  LIQUID_LOG_LEVEL_T_ERROR = 3,
} liquid_log_level_t;

/**
 * Type representing message content variants.
 */
typedef enum liquid_message_content_type_t {
  LIQUID_MESSAGE_CONTENT_TYPE_T_STRING = 0,
  LIQUID_MESSAGE_CONTENT_TYPE_T_WAV = 1,
  LIQUID_MESSAGE_CONTENT_TYPE_T_JPEG = 2,
} liquid_message_content_type_t;

/**
 * Opaque type representing a engine pointer.
 */
typedef struct liquid_inference_engine_t liquid_inference_engine_t;

/**
 * C callback type: level as int, null-terminated target and message
 */
typedef void (*liquid_log_callback)(enum liquid_log_level_t level, const char *target, const char *msg);

/**
 * Type representing a cache options.
 */
typedef struct liquid_inference_engine_cache_options_t {
  /**
   * The path to the cache on disk, required
   */
  const char *path;
  /**
   * The maximum number of entries in the cache, treat as the number of points to cache * 2
   */
  size_t max_entries;
} liquid_inference_engine_cache_options_t;

typedef struct liquid_inference_engine_optional_uint32 {
  bool has_value;
  uint32_t value;
} liquid_inference_engine_optional_uint32;

/**
 * Type representing an engine options.
 */
typedef struct liquid_inference_engine_options_t {
  /**
   * The path to the bundle, required.
   */
  const char *bundle_path;
  /**
   * The cache options, set to null if not used
   */
  const struct liquid_inference_engine_cache_options_t *cache_options;
  /**
   * The number of CPU threads to use.
   */
  struct liquid_inference_engine_optional_uint32 cpu_threads;
} liquid_inference_engine_options_t;

/**
 * Type representing a engine state.
 */
typedef struct liquid_inference_engine_state_t {
  int64_t cur_pos;
  int64_t max_seq_len;
} liquid_inference_engine_state_t;

/**
 * Type representing message content.
 */
typedef struct liquid_message_content_t {
  enum liquid_message_content_type_t content_type;
  const uint8_t *data;
  size_t data_len;
} liquid_message_content_t;

/**
 * Type representing a message.
 */
typedef struct liquid_message_t {
  const char *role;
  const struct liquid_message_content_t *content;
  size_t content_len;
} liquid_message_t;

/**
 * C callback type: token as string, arg as void pointer
 */
typedef enum liquid_error_t (*liquid_inference_engine_token_callback_t)(const char *token, void *arg);

/**
 * Stats for generation
 */
typedef struct liquid_inference_engine_generation_stats_t {
  float token_per_second;
} liquid_inference_engine_generation_stats_t;

/**
 * Stats callback type
 */
typedef enum liquid_error_t (*liquid_inference_engine_stats_callback_t)(const struct liquid_inference_engine_generation_stats_t *stats,
                                                                        void *arg);

/**
 * Optional stats callback structure
 */
typedef struct liquid_inference_engine_optional_stats_callback_t {
  bool has_value;
  liquid_inference_engine_stats_callback_t value;
} liquid_inference_engine_optional_stats_callback_t;

typedef struct liquid_inference_engine_optional_float {
  bool has_value;
  float value;
} liquid_inference_engine_optional_float;

typedef struct liquid_inference_engine_optional_uint64 {
  bool has_value;
  uint64_t value;
} liquid_inference_engine_optional_uint64;

typedef struct liquid_inference_engine_sampler_params_t {
  /**
   * The temperature.
   */
  struct liquid_inference_engine_optional_float temperature;
  /**
   * The top p.
   */
  struct liquid_inference_engine_optional_float top_p;
  /**
   * The min p.
   */
  struct liquid_inference_engine_optional_float min_p;
  /**
   * The repetition penalty.
   */
  struct liquid_inference_engine_optional_float repetition_penalty;
  /**
   * The random number generator seed.
   */
  struct liquid_inference_engine_optional_uint64 rng_seed;
} liquid_inference_engine_sampler_params_t;

/**
 * Constraint structure for text generation
 */
typedef struct liquid_inference_engine_constraint_t {
  enum liquid_inference_engine_constraint_type_t constraint_type;
  const char *config;
} liquid_inference_engine_constraint_t;

/**
 * Optional constraint structure
 */
typedef struct liquid_inference_engine_optional_constraint_t {
  bool has_value;
  const struct liquid_inference_engine_constraint_t *value;
} liquid_inference_engine_optional_constraint_t;

/**
 * Generation options for FFI
 */
typedef struct liquid_inference_engine_generate_options {
  /**
   * The token callback function.
   */
  liquid_inference_engine_token_callback_t token_callback;
  /**
   * The token callback user data.
   */
  void *token_callback_user_data;
  /**
   * The stats callback function.
   */
  struct liquid_inference_engine_optional_stats_callback_t stats_callback;
  /**
   * The stats callback user data.
   */
  void *stats_callback_user_data;
  /**
   * Whether to reset the history.
   */
  bool reset_history;
  /**
   * The sequence length.
   */
  struct liquid_inference_engine_optional_uint32 seq_len;
  /**
   * The sampler parameters.
   */
  struct liquid_inference_engine_sampler_params_t sampler_params;
  /**
   * The constraint for text generation.
   */
  struct liquid_inference_engine_optional_constraint_t constraint;
} liquid_inference_engine_generate_options;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/**
 * Setup logging with the given level and callback
 *
 * # Arguments
 *
 * * `level` - The log level to set, must be one of liquid_log_level_t values
 * * `cb` - The log callback to set
 */
LIQUID_API void liquid_setup_logging(int32_t level, liquid_log_callback cb);

/**
 * Initialize the backends ahead of time.
 *
 * If not called, the backends will be initialized on the first engine instance creation.
 */
LIQUID_API void liquid_init(void);

/**
 * Destroys a string array and its contents.
 *
 * # Safety
 *
 * * The `string_array_ptr` must be a valid pointer to a string array allocated by this library.
 * * The `array_len` must be the correct length of the array.
 * * This function must be called exactly once for each array.
 *
 * # Arguments
 *
 * * `string_array_ptr` - A pointer to the string array.
 * * `array_len` - The number of strings in the array.
 */
LIQUID_API enum liquid_error_t liquid_string_array_destroy(const char *const *string_array_ptr, size_t array_len);

/**
 * Creates a new engine instance.
 *
 * # Safety
 *
 * * The `options_ptr` must be a valid pointer to a liquid_inference_engine_options_t.
 * * The `engine_ptr` must be a valid pointer to a liquid_inference_engine_t.
 *
 * # Arguments
 *
 * * `options_ptr` - A pointer to the engine options.
 * * `engine_ptr` - A pointer to the engine pointer.
 */
LIQUID_API
enum liquid_error_t liquid_inference_engine_create(const struct liquid_inference_engine_options_t *options_ptr,
                                                   struct liquid_inference_engine_t **engine_ptr);

/**
 * Destroys an engine instance.
 *
 * # Safety
 *
 * * The `engine_ptr` must be a valid pointer to a liquid_inference_engine_t.
 *
 * # Arguments
 *
 * * `engine_ptr` - A pointer to the engine pointer.
 */
LIQUID_API enum liquid_error_t liquid_inference_engine_destroy(struct liquid_inference_engine_t *engine_ptr);

/**
 * Gets the model ID of the engine.
 *
 * # Safety
 *
 * * The `engine_ptr` must be a valid pointer to a liquid_inference_engine_t.
 * * The `model_id_ptr` must be a valid pointer to a c_char.
 * * The `model_id_len` must be a valid pointer to a usize.
 *
 * # Memory Management
 *
 * When a model ID is returned (non-null), ownership of the memory is transferred to the C code.
 * The C code becomes responsible for freeing this memory using `liquid_string_destroy`.
 * The memory must be freed exactly once.
 *
 * # Arguments
 *
 * * `engine_ptr` - A pointer to the engine pointer.
 * * `model_id_ptr` - A pointer to the model ID pointer. On success, ownership of the memory is transferred to the caller.
 * * `model_id_len` - The length of the model ID.
 */
LIQUID_API
enum liquid_error_t liquid_inference_engine_get_model_id(struct liquid_inference_engine_t *engine_ptr,
                                                         const char **model_id_ptr,
                                                         size_t *model_id_len);

/**
 * Gets the current state of the engine.
 *
 * # Safety
 *
 * * The `engine_ptr` must be a valid pointer to a liquid_inference_engine_t.
 * * The `state_ptr` must be a valid pointer to a liquid_inference_engine_state_t.
 *
 * # Arguments
 *
 * * `engine_ptr` - A pointer to the engine pointer.
 * * `state_ptr` - A pointer to the engine state.
 */
LIQUID_API
enum liquid_error_t liquid_inference_engine_get_state(struct liquid_inference_engine_t *engine_ptr,
                                                      struct liquid_inference_engine_state_t *state_ptr);

/**
 * Resets the engine to its initial state.
 *
 * # Safety
 *
 * * The `engine_ptr` must be a valid pointer to a liquid_inference_engine_t.
 *
 * # Arguments
 *
 * * `engine_ptr` - A pointer to the engine pointer.
 */
LIQUID_API enum liquid_error_t liquid_inference_engine_reset(struct liquid_inference_engine_t *engine_ptr);

/**
 * Stops the ongoing generation process.
 *
 * # Safety
 *
 * * The `engine_ptr` must be a valid pointer to a liquid_inference_engine_t.
 *
 * # Arguments
 *
 * * `engine_ptr` - A pointer to the engine pointer.
 */
LIQUID_API enum liquid_error_t liquid_inference_engine_stop(struct liquid_inference_engine_t *engine_ptr);

/**
 * Generates a response for a chat.
 *
 * # Safety
 *
 * * The `engine_ptr` must be a valid pointer to a liquid_inference_engine_t.
 * * The `messages_ptr` must be a valid pointer to a liquid_message_t.
 * * The `options` must be a valid pointer to a liquid_inference_engine_generate_options.
 *
 * # Arguments
 *
 * * `engine_ptr` - A pointer to the engine pointer.
 * * `messages_ptr` - A pointer to the messages pointer.
 * * `messages_len` - The length of the messages.
 * * `options` - A pointer to the generation options.
 */
LIQUID_API
enum liquid_error_t liquid_inference_engine_generate(struct liquid_inference_engine_t *engine_ptr,
                                                     const struct liquid_message_t *messages_ptr,
                                                     size_t messages_len,
                                                     const struct liquid_inference_engine_generate_options *options);

/**
 * Validates a chat conversation.
 *
 * If validation fails, the validation message is returned otherwise message is null.
 *
 * The error indicates the invocation success, not the validation success.
 *
 * # Safety
 *
 * * The `engine_ptr` must be a valid pointer to a liquid_inference_engine_t.
 * * The `messages_ptr` must be a valid pointer to a liquid_message_t.
 * * The `validation_message_ptr` must be a valid pointer to a c_char.
 * * The `validation_message_len` must be a valid pointer to a usize.
 *
 * # Memory Management
 *
 * When a validation message is returned (non-null), ownership of the memory is transferred to the C code.
 * The C code becomes responsible for freeing this memory using `liquid_string_destroy`.
 * The memory must be freed exactly once.
 *
 * # Arguments
 *
 * * `engine_ptr` - A pointer to the engine pointer.
 * * `messages_ptr` - A pointer to the messages pointer.
 * * `messages_len` - The length of the messages.
 * * `validation_message_ptr` - A pointer to the validation message pointer. On success, ownership of the memory is transferred to the caller.
 * * `validation_message_len` - The length of the validation message.
 */
LIQUID_API
enum liquid_error_t liquid_inference_engine_validate(struct liquid_inference_engine_t *engine_ptr,
                                                     const struct liquid_message_t *messages_ptr,
                                                     size_t messages_len,
                                                     const char **validation_message_ptr,
                                                     size_t *validation_message_len);

/**
 * Generates a response for a prompt.
 *
 * # Safety
 *
 * * The `engine_ptr` must be a valid pointer to a liquid_inference_engine_t.
 * * The `prompt` must be a valid pointer to a c_char.
 * * The `options` must be a valid pointer to a liquid_inference_engine_generate_options.
 *
 * # Arguments
 *
 * * `engine_ptr` - A pointer to the engine pointer.
 * * `prompt` - A pointer to the prompt string.
 * * `options` - A pointer to the generation options.
 */
LIQUID_API
enum liquid_error_t liquid_inference_engine_generate_for_prompt(struct liquid_inference_engine_t *engine_ptr,
                                                                const char *prompt,
                                                                const struct liquid_inference_engine_generate_options *options);

/**
 * Gets the prompt size in tokens.
 *
 * # Safety
 *
 * * The `engine_ptr` must be a valid pointer to a liquid_inference_engine_t.
 * * The `messages_ptr` must be a valid pointer to a liquid_message_t.
 * * The `prompt_tokens_size` must be a valid pointer to a usize.
 *
 * # Arguments
 *
 * * `engine_ptr` - A pointer to the engine pointer.
 * * `messages_ptr` - A pointer to the messages pointer.
 * * `messages_len` - The length of the messages.
 * * `add_bos_token` - Whether to add the BOS token to the prompt.
 * * `prompt_tokens_size` - A pointer to store the prompt tokens size.
 */
LIQUID_API
enum liquid_error_t liquid_inference_engine_get_prompt_tokens_size(struct liquid_inference_engine_t *engine_ptr,
                                                                   const struct liquid_message_t *messages_ptr,
                                                                   size_t messages_len,
                                                                   bool add_bos_token,
                                                                   size_t *prompt_tokens_size);

/**
 * Gets the bundle configuration as a JSON string.
 *
 * # Safety
 *
 * * The `engine_ptr` must be a valid pointer to a liquid_inference_engine_t.
 * * The `bundle_config_ptr` must be a valid pointer to a c_char.
 * * The `bundle_config_len` must be a valid pointer to a usize.
 *
 * # Memory Management
 *
 * When a bundle config is returned (non-null), ownership of the memory is transferred to the C code.
 * The C code becomes responsible for freeing this memory using `liquid_string_destroy`.
 * The memory must be freed exactly once.
 *
 * # Arguments
 *
 * * `engine_ptr` - A pointer to the engine pointer.
 * * `bundle_config_ptr` - A pointer to the bundle config pointer. On success, ownership of the memory is transferred to the caller.
 * * `bundle_config_len` - The length of the bundle config.
 */
LIQUID_API
enum liquid_error_t liquid_inference_engine_get_bundle_config(struct liquid_inference_engine_t *engine_ptr,
                                                              const char **bundle_config_ptr,
                                                              size_t *bundle_config_len);

/**
 * Gets the bundle compatibility IDs as an array of strings.
 *
 * # Safety
 *
 * * The `compatibility_ids_ptr` must be a valid pointer to a pointer array.
 * * The `compatibility_ids_len` must be a valid pointer to a usize.
 *
 * # Memory Management
 *
 * When compatibility IDs are returned (non-null), ownership of the memory is transferred to the C code.
 * The C code becomes responsible for freeing this memory using `liquid_string_destroy` for each string.
 * The memory must be freed exactly once.
 *
 * # Arguments
 *
 * * `compatibility_ids_ptr` - A pointer to the compatibility IDs array pointer. On success, ownership of the memory is transferred to the caller.
 * * `compatibility_ids_len` - The number of compatibility IDs.
 */
LIQUID_API
enum liquid_error_t liquid_inference_engine_get_bundle_compatibility_ids(const char *const **compatibility_ids_ptr,
                                                                         size_t *compatibility_ids_len);

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus
